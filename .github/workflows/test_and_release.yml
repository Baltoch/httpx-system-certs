name: Test HTTPx System Certs, release on GitHub and publish to PyPI

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ["3.10", "3.11", "3.12", "3.13"]
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-tests.txt
          pip install .
      - name: Install mkcert
        run: |
          ARCH=$(uname -m)
          case "$ARCH" in \
          x86_64) ARCH="amd64";; \
          aarch64) ARCH="arm64";; \
          *) echo "Unsupported architecture: $ARCH" && exit 1;; \
          esac
          curl -L -o /usr/local/bin/mkcert https://dl.filippo.io/mkcert/latest?for=$(uname -s)/${ARCH}
          chmod +x /usr/local/bin/mkcert
      - name: Generate SSL certificates with mkcert
        run: |
          mkcert -install
          mkcert -key-file key.pem -cert-file cert.pem test.local *.test.local 127.0.0.1 ::1 localhost
      - name: Test with pytest
        run: |
          pytest -v tests/httpx_system_certs_tests.py

  release:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    permissions:
      id-token: write
      contents: write
      deployments: write

    # Dedicated environments with protections for publishing are strongly recommended.
    environment:
      name: pypi
      url: https://pypi.org/project/httpx-system-certs/
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Build release distributions
        run: |
          python -m pip install build setuptools
          python -m build

      - name: Get package version
        id: get_version
        run: |
          VERSION=$(python setup.py --version)
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.PACKAGE_VERSION }}
          name: Release v${{ steps.get_version.outputs.PACKAGE_VERSION }}
          body_path: CHANGELOG.md
          files: |
            dist/*
            LICENSE
          draft: false
          prerelease: false
          make_latest: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
